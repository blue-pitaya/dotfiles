{
  "Simple actor": {
    "prefix": ["actor-new"],
    "body": [
      "import akka.actor.typed.scaladsl.Behaviors",
      "import akka.actor.typed.Behavior",
      "",
      "object $1 {",
      "  trait Message",
      "",
      "  def apply(): Behavior[Message] =",
      "    Behaviors.receive { (context, message) =>",
      "      message match {",
      "        case _ => context.log.info(\"Strange message.\")",
      "      }",
      "",
      "      Behaviors.same",
      "    }",
      "}"
    ],
    "description": "Creates most simple actor."
  },
  "EventSourced Actor": {
    "prefix": ["actor-event-source-new"],
    "body": [
      "import akka.persistence.typed.scaladsl.EventSourcedBehavior",
      "import akka.persistence.typed.scaladsl.Effect",
      "import akka.persistence.typed.PersistenceId",
      "import akka.actor.typed.Behavior",
      "import akka.actor.typed.scaladsl.ActorContext",
      "import akka.actor.typed.scaladsl.Behaviors",
      "",
      "object $1 {",
      "  sealed trait Command",
      "",
      "  sealed trait Event",
      "",
      "  final case class State()",
      "",
      "  val commandHandler: (ActorContext[Command]) => (State, Command) => Effect[Event, State] = {",
      "    (context) => (state, command) =>",
      "      command match {",
      "        case _ => ???",
      "      }",
      "  }",
      "",
      "  val eventHandler: (State, Event) => State = { (state, event) =>",
      "    event match {",
      "      case _ => ???",
      "    }",
      "  }",
      "",
      "  def apply(): Behavior[Command] =",
      "    Behaviors.setup { context =>",
      "      EventSourcedBehavior[Command, Event, State](",
      "        persistenceId = PersistenceId.ofUniqueId(\"\"),",
      "        emptyState = State(),",
      "        commandHandler = commandHandler(context),",
      "        eventHandler = eventHandler",
      "      )",
      "    }",
      "}"
    ],
    "description": "Event sourced actor"
  }
}
